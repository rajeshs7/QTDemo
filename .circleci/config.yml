version: 2.1

jobs:
  test:
    description: Run tests
    working_directory: ~/blueprint1
    docker:
      - image: circleci/openjdk:8u222-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-node-dependencies-{{ checksum "package-lock.json" }}
      - run:
          name: Install npm dependencies
          command: npm install
      - save_cache:
          key: v1-node-dependencies-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Run Unit test cases
          command: npm test
      - run:
          name: Build
          command: npm run build
  build:
    description: Build application
    working_directory: ~/blueprint1
    docker:
      - image: circleci/openjdk:8u222-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-node-dependencies-{{ checksum "package-lock.json" }}
      - run:
          name: Install npm dependencies
          command: npm install
      - save_cache:
          key: v1-node-dependencies-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Build
          command: npm run build
  checkmarx_scan:
    docker:
      - image: codehub-docker.jfrog.io/devops-checkmarx:latest
        auth:
          username: $ARTIFACTORY_USER
          password: $ARTIFACTORY_TOKEN
    working_directory: ~/app
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: start the Checkmarx scan
          command: |
            /opt/CxConsolePlugin/runCxConsole.sh Scan -v \
            -CxServer $CHECKMARX_SERVER \
            -Cxuser $CHECKMARX_USER \
            -CxPassword $CHECKMARX_PASSWORD \
            -ProjectName "CxServer\Accelerator\blueprint1" \
            -LocationType folder \
            -LocationPath ~/app \
            -Preset Default \
            -executepackagedependency \
            -ReportPDF ~/app/report/blueprint1_scan_results.pdf
      - store_artifacts:
          path: ~/app/report/blueprint1_scan_results.pdf
  blackduck_scan:
    docker:
      - image: circleci/openjdk:8u222-node
    working_directory: ~/app
    environment:
      COMMIT_ID: $(echo $CIRCLE_SHA1 | cut -c1-7)
    steps:
      - checkout
      - attach_workspace:
            at: workspace
      - run:
          name: Install npm packages
          command: npm install
      - run:
          name: Start the Synopsys Detect scan
          command: |
            bash ./.circleci/detect.sh \
            --blackduck.url=$BLACKDUCK_URL \
            --blackduck.api.token=$BLACKDUCK_TOKEN \
            --blackduck.timeout=3600 \
            --detect.blackduck.signature.scanner.snippet.matching=SNIPPET_MATCHING \
            --detect.npm.path=/usr/bin/npm \
            --detect.npm.node.path=/usr/bin/node \
            --detect.project.name="Blueprint1" \
            --detect.project.version.name="ver.$CIRCLE_BUILD_NUM.$COMMIT_ID" \
            --detect.risk.report.pdf=true \
            --detect.risk.report.pdf.path="~/app/report" \
            --detect.notices.report=true \
            --detect.notices.report.path="~/app/report" \
            --detect.report.timeout=4800
      - store_artifacts:
          path: ~/app/report
workflows:
  test_and_build:
    jobs:
      - test
      - build:
          requires:
            - test
  scan:
    jobs:
      - checkmarx_scan:
          context: Codehub-Common
          filters:
            branches:
              only:
              - /sast\/.*/                 # follow branching conventions matching the regex 
                                           # eg: sast/1, sast/prod 
                                           # to run sast scan
      - blackduck_scan:
          context: Codehub-Common
          filters:
            branches:
              only:
              - /oss\/.*/             # follow branching conventions matching the regex 
                                            # eg: oss/1, oss/prod 
                                            # to run blackduck scan